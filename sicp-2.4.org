#+TITLE: SICP 2.4 抽象データの多重表現

復習: データ抽象化とは
- システムを構築するための方法論
- プログラムの操作対象となるデータオブジェクトに対してどのような実装を
  選ぶかということと独立してプログラムのほとんどの部分を記述出来るよう
  にする

例: 有理数プログラムの設計
- 抽象化の壁を使った
  - 有理数のセレクタとコンストラクタ（make-rat, numer, denom）により
  - 有理数を ”どう使うか” ということと 有理数のリスト構造による表現という "内部構造" とを分離

抽象データの多重表現
- データの操作とその表現の分離に加え
- 複数のデータ表現方法自体をそれぞれ分離し、一つのプラットフォームでそれらを共存させる抽象化の壁

モジュールの加法性(additivity)
- 既存モジュールを新たに設計し直したり実装し直したりすることなく、より大きなシステムに組み込めること


この章で学ぶこと
- *ジェネリック手続き(generic procedure)*
  - 二種類以上の方法で表現されるデータを扱える手続き
- *タイプタグ(type tag)* をもつデータオブジェクト
  - どのように処理されるべきかという情報を明示的に持つデータオブジェクト
  - ジェネリック手続きの構築に必要
- *データ主導(data-directed)プログラミング*
  - ジェネリック演算によって加法的にシステムを組み立てていく実装戦略

最初に複素数の例を扱う。


* 2.4.1 複素数の表現

ここでは複素数に対する算術演算を行うシステムを開発していく

まず２つの表現方法について検討する
- 直交形式（実部と虚部）
  - 
- 極形式（絶対値と偏角）

複素数は実軸と虚軸という二つの直交する軸を持つ二次元空間と考えることが出来る（図2.20）
- z = x + iy (i^2 = -1) : 実座標がxで、虚座標がyの平面上の点として考えられる

複素数の和は直交形式表現では座標の和になる。
#+BEGIN_SRC 
実部(z1+z2) = 実部(z1) + 実部(z2)
虚部(z1+z2) = 虚部(z1) + 虚部(z2)
#+END_SRC

複素数を掛け算するときは、複素数を極形式で考える方が自然
#+BEGIN_SRC 
大きさ(z1*z2) = 大きさ(z1) * 大きさ(z2)
角度(z1*z2) = 角度(z1) * 角度(z2)
#+END_SRC

複素数には二つの異なる表現があり、それぞれ異なる演算に適しているが、利
用者からはコンピュータがどちらの表現を使っていても複素数の全ての演算が
使えるようになっていなければならない。


データ抽象化戦略
- 複素数演算は以下の４つのセレクタによって実装されているとする
  - ~real-part~, ~imag_part~, ~magnitude~, ~angle~
- 複素数の構築には二つの手続きがあるとする
  - ~make-from-real-imag~: 指定された実部と虚部を持つ複素数を返す
  - ~make-from-mag-ang~: 指定された絶対値と偏角を持つ複素数を返す
これらの鉄続きは任意の複素数に対して、
#+BEGIN_SRC scheme
(make-from-real-imag (real-part z) (imag-part z))
(make-from-mag-ang (magnitude z) (angle z))
#+END_SRC
の両方ともzに等しい複素数を返すという性質を持つ


これらのコンストラクタとセレクタによって規定される *抽象データ* を使っ
て複素数の算術演算を（以下のように）実装できる。
#+BEGIN_SRC scheme

#+END_SRC


* 2.4.2 タグ付きデータ


* 2.4.3 データ主導プログラミングと加法性

