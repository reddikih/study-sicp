* 2 データを用いた抽象化の構築

第１章のポイント

- 計算プロセスとプログラム設計における手続きの役割についてみてきた
- 複合手続きを作る方法
- defineによる手続きの抽象化
- プロセスの局所展開にパターンとして手続きを捉えることができること
  - (*注*) これはどのことをいっている？ 
- プロセスの共通パターンについて分類・論証およびアルゴリズム的解析
- 高階手続きによる計算上の一般的手法の扱い
- それらを使って考えることができるようになる

この章でのポイント

- さらに複雑なデータについてみていく
  - 第１章で扱ったデータはすべて単純な数値データ
  - 現実の問題解決のためには不十分
- データオブジェクトを組み合わせて *複合データ(compound data)* を作る
  - ためにプログラミング言語が提供する手段をみていく

なぜ複合データが必要か？
- プログラムを設計する概念レベルを引き上げ、設計のモジュール性を高め、
  言語の表現力を強くしたいから
- 手続きを定義できることにより基本演算よりも高い概念レベルで手続きを扱える
- 同様に、複合データオブジェクトを構築できることで言語の基本データオブ
  ジェクトよりも高い概念レベルでデータを扱えるようになる

データ抽象化(data abstraction)
- プログラム中のデータオブジェクトをどうやって表すかという部分とデータ
  オブジェクトをどうやって使うかを扱う部分を分離する設計手法
- データ抽象化により、プログラムの設計・保守・修正が簡単になる

抽象化の壁(abstraction barrier)


